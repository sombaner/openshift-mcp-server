# Complete CI/CD Pipeline Example
# This example shows how to set up a complete pipeline for a Node.js application

apiVersion: v1
kind: ConfigMap
metadata:
  name: example-pipeline-config
  namespace: ai-mcp-openshift
data:
  pipeline-setup.sh: |
    #!/bin/bash
    set -e
    
    echo "Setting up example CI/CD pipeline..."
    
    MCP_ENDPOINT="http://ai-mcp-openshift-server:8081/mcp"
    
    # Step 1: Add registry configuration
    echo "Adding registry configuration..."
    curl -X POST $MCP_ENDPOINT \
      -H "Content-Type: application/json" \
      -d '{
        "tool": "registry_add",
        "arguments": {
          "name": "quay",
          "url": "quay.io",
          "username": "'${REGISTRY_USERNAME}'",
          "password": "'${REGISTRY_PASSWORD}'",
          "secure": true
        }
      }'
    
    # Step 2: Create complete CI/CD pipeline
    echo "Creating CI/CD pipeline..."
    curl -X POST $MCP_ENDPOINT \
      -H "Content-Type: application/json" \
      -d '{
        "tool": "cicd_create_pipeline",
        "arguments": {
          "name": "nodejs-app-pipeline",
          "git_url": "https://github.com/example/nodejs-app.git",
          "git_branch": "main",
          "image_name": "nodejs-app",
          "registry": "quay",
          "deploy_namespace": "nodejs-app-prod",
          "dockerfile": "Dockerfile",
          "build_args": {
            "NODE_VERSION": "18"
          },
          "env_vars": {
            "NODE_ENV": "production",
            "PORT": "3000",
            "LOG_LEVEL": "info"
          },
          "git_username": "'${GIT_USERNAME}'",
          "git_token": "'${GIT_TOKEN}'"
        }
      }'
    
    echo "Pipeline setup complete!"
    
  test-inference.sh: |
    #!/bin/bash
    set -e
    
    echo "Testing inference endpoints..."
    
    INFERENCE_ENDPOINT="http://ai-mcp-openshift-server:8080"
    
    # Test health endpoint
    echo "Testing health endpoint..."
    curl -f $INFERENCE_ENDPOINT/health
    
    # Test model listing
    echo "Testing model listing..."
    curl -f $INFERENCE_ENDPOINT/models
    
    # Test text inference
    echo "Testing text inference..."
    curl -X POST $INFERENCE_ENDPOINT/infer \
      -H "Content-Type: application/json" \
      -d '{
        "inputs": ["Hello OpenShift AI", "This is a test"],
        "model_name": "text_embeddings"
      }'
    
    # Test numeric inference
    echo "Testing numeric inference..."
    curl -X POST $INFERENCE_ENDPOINT/infer \
      -H "Content-Type: application/json" \
      -d '{
        "inputs": [[1.0, 2.0, 3.0, 4.0]],
        "model_name": "simple_classifier"
      }'
    
    echo "Inference tests complete!"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: example-pipeline-setup
  namespace: ai-mcp-openshift
spec:
  template:
    spec:
      containers:
      - name: setup
        image: curlimages/curl:latest
        command: ["/bin/sh"]
        args: ["/scripts/pipeline-setup.sh"]
        env:
        - name: REGISTRY_USERNAME
          valueFrom:
            secretKeyRef:
              name: registry-credentials
              key: username
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-credentials
              key: password
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
        - name: GIT_TOKEN
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: token
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: example-pipeline-config
          defaultMode: 0755
      restartPolicy: Never
  backoffLimit: 3

---
apiVersion: batch/v1
kind: Job
metadata:
  name: example-inference-test
  namespace: ai-mcp-openshift
spec:
  template:
    spec:
      containers:
      - name: test
        image: curlimages/curl:latest
        command: ["/bin/sh"]
        args: ["/scripts/test-inference.sh"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: example-pipeline-config
          defaultMode: 0755
      restartPolicy: Never
  backoffLimit: 3
