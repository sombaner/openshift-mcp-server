# Optimized Dockerfile for smaller image size (~500MB target)
# Multi-stage build with alpine images

# Stage 1: Go builder (minimal)
FROM --platform=linux/amd64 golang:1.24-alpine AS go-builder
RUN apk add --no-cache git ca-certificates
WORKDIR /src
COPY go.mod go.sum ./
RUN go mod download
COPY cmd/ ./cmd/
COPY pkg/ ./pkg/
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags="-w -s" -o integrated-server ./cmd/integrated-server

# Stage 2: Python dependencies (optimized)
FROM --platform=linux/amd64 python:3.11-alpine AS python-builder
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache --virtual .build-deps \
    gcc \
    musl-dev \
    linux-headers \
    git

# Copy optimized requirements
COPY python/requirements-optimized.txt ./requirements.txt

# Install Python packages (CPU-only versions)
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 3: Final runtime image
FROM --platform=linux/amd64 python:3.11-alpine

WORKDIR /app

# Install only essential runtime dependencies
RUN apk add --no-cache \
    curl \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Copy Go binary
COPY --from=go-builder /src/integrated-server ./integrated-server

# Copy Python packages from builder
COPY --from=python-builder /root/.local /root/.local

# Copy Python application code
COPY python/kubernetes_mcp_server/ ./kubernetes_mcp_server/

# Copy manifests (if needed)
COPY manifests/ ./manifests/

# Create necessary directories
RUN mkdir -p /app/models /app/workspace /tmp

# Set environment variables
ENV PYTHONPATH=/app
ENV PATH=/root/.local/bin:$PATH
ENV PORT=8080
ENV MCP_PORT=8081
ENV INFERENCE_PORT=8080
ENV MCP_PROFILE=cicd
ENV LOG_LEVEL=2
ENV DEFAULT_REGISTRY=quay.io
ENV DEFAULT_NAMESPACE=ai-mcp-openshift

# Create non-root user
RUN addgroup -S appuser && adduser -S appuser -G appuser
RUN chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose ports
EXPOSE 8080 8081

# Start the integrated server
ENTRYPOINT ["./integrated-server"]
